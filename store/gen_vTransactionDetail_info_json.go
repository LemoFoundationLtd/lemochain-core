// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package store

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/chain/types"
	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*vTransactionDetailMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (v VTransactionDetail) MarshalJSON() ([]byte, error) {
	type VTransactionDetail struct {
		BlockHash   common.Hash        `json:"blockHash" gencodec:"required"`
		PHash       common.Hash        `json:"pHash" gencodec:"required"`
		Height      hexutil.Uint32     `json:"height" gencodec:"required"`
		Tx          *types.Transaction `json:"tx"  gencodec:"required"`
		PackageTime hexutil.Uint32     `json:"time" gencodec:"required"`
		AssetCode   common.Hash        `json:"assetCode"`
		AssetId     common.Hash        `json:"assetId"`
	}
	var enc VTransactionDetail
	enc.BlockHash = v.BlockHash
	enc.PHash = v.PHash
	enc.Height = hexutil.Uint32(v.Height)
	enc.Tx = v.Tx
	enc.PackageTime = hexutil.Uint32(v.PackageTime)
	enc.AssetCode = v.AssetCode
	enc.AssetId = v.AssetId
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (v *VTransactionDetail) UnmarshalJSON(input []byte) error {
	type VTransactionDetail struct {
		BlockHash   *common.Hash       `json:"blockHash" gencodec:"required"`
		PHash       *common.Hash       `json:"pHash" gencodec:"required"`
		Height      *hexutil.Uint32    `json:"height" gencodec:"required"`
		Tx          *types.Transaction `json:"tx"  gencodec:"required"`
		PackageTime *hexutil.Uint32    `json:"time" gencodec:"required"`
		AssetCode   *common.Hash       `json:"assetCode"`
		AssetId     *common.Hash       `json:"assetId"`
	}
	var dec VTransactionDetail
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockHash == nil {
		return errors.New("missing required field 'blockHash' for VTransactionDetail")
	}
	v.BlockHash = *dec.BlockHash
	if dec.PHash == nil {
		return errors.New("missing required field 'pHash' for VTransactionDetail")
	}
	v.PHash = *dec.PHash
	if dec.Height == nil {
		return errors.New("missing required field 'height' for VTransactionDetail")
	}
	v.Height = uint32(*dec.Height)
	if dec.Tx == nil {
		return errors.New("missing required field 'tx' for VTransactionDetail")
	}
	v.Tx = dec.Tx
	if dec.PackageTime == nil {
		return errors.New("missing required field 'time' for VTransactionDetail")
	}
	v.PackageTime = uint32(*dec.PackageTime)
	if dec.AssetCode != nil {
		v.AssetCode = *dec.AssetCode
	}
	if dec.AssetId != nil {
		v.AssetId = *dec.AssetId
	}
	return nil
}
