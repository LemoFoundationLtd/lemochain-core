// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-go/chain/deputynode"
	"github.com/LemoFoundationLtd/lemochain-go/common/math"
)

var _ = (*ChainConfigFileMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c ChainConfigFile) MarshalJSON() ([]byte, error) {
	type ChainConfigFile struct {
		ChainID     *math.HexOrDecimal256   `json:"chainID"     gencodec:"required"`
		SleepTime   math.HexOrDecimal64     `json:"sleepTime"   gencodec:"required"`
		Timeout     math.HexOrDecimal64     `json:"timeout"     gencodec:"required"`
		DeputyNodes []deputynode.DeputyNode `json:"deputyNodes" gencodec:"required"`
	}
	var enc ChainConfigFile
	enc.ChainID = (*math.HexOrDecimal256)(c.ChainID)
	enc.SleepTime = math.HexOrDecimal64(c.SleepTime)
	enc.Timeout = math.HexOrDecimal64(c.Timeout)
	enc.DeputyNodes = c.DeputyNodes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *ChainConfigFile) UnmarshalJSON(input []byte) error {
	type ChainConfigFile struct {
		ChainID     *math.HexOrDecimal256   `json:"chainID"     gencodec:"required"`
		SleepTime   *math.HexOrDecimal64    `json:"sleepTime"   gencodec:"required"`
		Timeout     *math.HexOrDecimal64    `json:"timeout"     gencodec:"required"`
		DeputyNodes []deputynode.DeputyNode `json:"deputyNodes" gencodec:"required"`
	}
	var dec ChainConfigFile
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainID' for ChainConfigFile")
	}
	c.ChainID = (*big.Int)(dec.ChainID)
	if dec.SleepTime == nil {
		return errors.New("missing required field 'sleepTime' for ChainConfigFile")
	}
	c.SleepTime = uint64(*dec.SleepTime)
	if dec.Timeout == nil {
		return errors.New("missing required field 'timeout' for ChainConfigFile")
	}
	c.Timeout = uint64(*dec.Timeout)
	if dec.DeputyNodes == nil {
		return errors.New("missing required field 'deputyNodes' for ChainConfigFile")
	}
	c.DeputyNodes = dec.DeputyNodes
	return nil
}
