// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-go/common/math"
)

var _ = (*netInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (n NetInfo) MarshalJSON() ([]byte, error) {
	type NetInfo struct {
		Port     math.Decimal32 `json:"port" gencodec:"required"`
		NodeName string         `json:"nodeName" gencodec:"required"`
		Version  string         `json:"nodeVersion" gencodec:"required"`
		OS       string         `json:"nodeOS" gencodec:"required"`
		Go       string         `json:"goVersion" gencodec:"required"`
	}
	var enc NetInfo
	enc.Port = math.Decimal32(n.Port)
	enc.NodeName = n.NodeName
	enc.Version = n.Version
	enc.OS = n.OS
	enc.Go = n.Go
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (n *NetInfo) UnmarshalJSON(input []byte) error {
	type NetInfo struct {
		Port     *math.Decimal32 `json:"port" gencodec:"required"`
		NodeName *string         `json:"nodeName" gencodec:"required"`
		Version  *string         `json:"nodeVersion" gencodec:"required"`
		OS       *string         `json:"nodeOS" gencodec:"required"`
		Go       *string         `json:"goVersion" gencodec:"required"`
	}
	var dec NetInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Port == nil {
		return errors.New("missing required field 'port' for NetInfo")
	}
	n.Port = uint32(*dec.Port)
	if dec.NodeName == nil {
		return errors.New("missing required field 'nodeName' for NetInfo")
	}
	n.NodeName = *dec.NodeName
	if dec.Version == nil {
		return errors.New("missing required field 'nodeVersion' for NetInfo")
	}
	n.Version = *dec.Version
	if dec.OS == nil {
		return errors.New("missing required field 'nodeOS' for NetInfo")
	}
	n.OS = *dec.OS
	if dec.Go == nil {
		return errors.New("missing required field 'goVersion' for NetInfo")
	}
	n.Go = *dec.Go
	return nil
}
