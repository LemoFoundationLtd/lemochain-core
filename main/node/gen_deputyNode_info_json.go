// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package node

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*deputyNodeInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (d DeputyNodeInfo) MarshalJSON() ([]byte, error) {
	type DeputyNodeInfo struct {
		MinerAddress  common.Address `json:"minerAddress"   gencodec:"required"`
		IncomeAddress common.Address `json:"incomeAddress" gencodec:"required"`
		NodeID        hexutil.Bytes  `json:"nodeID"         gencodec:"required"`
		Rank          hexutil.Uint32 `json:"rank"           gencodec:"required"`
		Votes         *hexutil.Big10 `json:"votes"          gencodec:"required"`
		Host          string         `json:"host"          gencodec:"required"`
		Port          string         `json:"port"          gencodec:"required"`
		DepositAmount string         `json:"depositAmount"  gencodec:"required"`
		Introduction  string         `json:"introduction"  gencodec:"required"`
		P2pUri        string         `json:"p2pUri"  gencodec:"required"`
	}
	var enc DeputyNodeInfo
	enc.MinerAddress = d.MinerAddress
	enc.IncomeAddress = d.IncomeAddress
	enc.NodeID = d.NodeID
	enc.Rank = hexutil.Uint32(d.Rank)
	enc.Votes = (*hexutil.Big10)(d.Votes)
	enc.Host = d.Host
	enc.Port = d.Port
	enc.DepositAmount = d.DepositAmount
	enc.Introduction = d.Introduction
	enc.P2pUri = d.P2pUri
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (d *DeputyNodeInfo) UnmarshalJSON(input []byte) error {
	type DeputyNodeInfo struct {
		MinerAddress  *common.Address `json:"minerAddress"   gencodec:"required"`
		IncomeAddress *common.Address `json:"incomeAddress" gencodec:"required"`
		NodeID        *hexutil.Bytes  `json:"nodeID"         gencodec:"required"`
		Rank          *hexutil.Uint32 `json:"rank"           gencodec:"required"`
		Votes         *hexutil.Big10  `json:"votes"          gencodec:"required"`
		Host          *string         `json:"host"          gencodec:"required"`
		Port          *string         `json:"port"          gencodec:"required"`
		DepositAmount *string         `json:"depositAmount"  gencodec:"required"`
		Introduction  *string         `json:"introduction"  gencodec:"required"`
		P2pUri        *string         `json:"p2pUri"  gencodec:"required"`
	}
	var dec DeputyNodeInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.MinerAddress == nil {
		return errors.New("missing required field 'minerAddress' for DeputyNodeInfo")
	}
	d.MinerAddress = *dec.MinerAddress
	if dec.IncomeAddress == nil {
		return errors.New("missing required field 'incomeAddress' for DeputyNodeInfo")
	}
	d.IncomeAddress = *dec.IncomeAddress
	if dec.NodeID == nil {
		return errors.New("missing required field 'nodeID' for DeputyNodeInfo")
	}
	d.NodeID = *dec.NodeID
	if dec.Rank == nil {
		return errors.New("missing required field 'rank' for DeputyNodeInfo")
	}
	d.Rank = uint32(*dec.Rank)
	if dec.Votes == nil {
		return errors.New("missing required field 'votes' for DeputyNodeInfo")
	}
	d.Votes = (*big.Int)(dec.Votes)
	if dec.Host == nil {
		return errors.New("missing required field 'host' for DeputyNodeInfo")
	}
	d.Host = *dec.Host
	if dec.Port == nil {
		return errors.New("missing required field 'port' for DeputyNodeInfo")
	}
	d.Port = *dec.Port
	if dec.DepositAmount == nil {
		return errors.New("missing required field 'depositAmount' for DeputyNodeInfo")
	}
	d.DepositAmount = *dec.DepositAmount
	if dec.Introduction == nil {
		return errors.New("missing required field 'introduction' for DeputyNodeInfo")
	}
	d.Introduction = *dec.Introduction
	if dec.P2pUri == nil {
		return errors.New("missing required field 'p2pUri' for DeputyNodeInfo")
	}
	d.P2pUri = *dec.P2pUri
	return nil
}
