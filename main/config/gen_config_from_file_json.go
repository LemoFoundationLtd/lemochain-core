// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package config

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*ConfigFromFileMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c ConfigFromFile) MarshalJSON() ([]byte, error) {
	type ConfigFromFile struct {
		ChainID         hexutil.Uint64 `json:"chainID"        gencodec:"required"`
		DeputyCount     hexutil.Uint64 `json:"deputyCount"    gencodec:"required"`
		SleepTime       hexutil.Uint64 `json:"sleepTime"`
		Timeout         hexutil.Uint64 `json:"timeout"`
		TermDuration    hexutil.Uint64 `json:"termDuration"`
		InterimDuration hexutil.Uint64 `json:"interimDuration"`
		ConnectionLimit hexutil.Uint64 `json:"connectionLimit"`
		AlarmUrl        string         `json:"alarmUrl"`
		GasPrice        string         `json:"gasPrice"`
	}
	var enc ConfigFromFile
	enc.ChainID = hexutil.Uint64(c.ChainID)
	enc.DeputyCount = hexutil.Uint64(c.DeputyCount)
	enc.SleepTime = hexutil.Uint64(c.SleepTime)
	enc.Timeout = hexutil.Uint64(c.Timeout)
	enc.TermDuration = hexutil.Uint64(c.TermDuration)
	enc.InterimDuration = hexutil.Uint64(c.InterimDuration)
	enc.ConnectionLimit = hexutil.Uint64(c.ConnectionLimit)
	enc.AlarmUrl = c.AlarmUrl
	enc.GasPrice = c.GasPrice
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *ConfigFromFile) UnmarshalJSON(input []byte) error {
	type ConfigFromFile struct {
		ChainID         *hexutil.Uint64 `json:"chainID"        gencodec:"required"`
		DeputyCount     *hexutil.Uint64 `json:"deputyCount"    gencodec:"required"`
		SleepTime       *hexutil.Uint64 `json:"sleepTime"`
		Timeout         *hexutil.Uint64 `json:"timeout"`
		TermDuration    *hexutil.Uint64 `json:"termDuration"`
		InterimDuration *hexutil.Uint64 `json:"interimDuration"`
		ConnectionLimit *hexutil.Uint64 `json:"connectionLimit"`
		AlarmUrl        *string         `json:"alarmUrl"`
		GasPrice        *string         `json:"gasPrice"`
	}
	var dec ConfigFromFile
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainID' for ConfigFromFile")
	}
	c.ChainID = uint64(*dec.ChainID)
	if dec.DeputyCount == nil {
		return errors.New("missing required field 'deputyCount' for ConfigFromFile")
	}
	c.DeputyCount = uint64(*dec.DeputyCount)
	if dec.SleepTime != nil {
		c.SleepTime = uint64(*dec.SleepTime)
	}
	if dec.Timeout != nil {
		c.Timeout = uint64(*dec.Timeout)
	}
	if dec.TermDuration != nil {
		c.TermDuration = uint64(*dec.TermDuration)
	}
	if dec.InterimDuration != nil {
		c.InterimDuration = uint64(*dec.InterimDuration)
	}
	if dec.ConnectionLimit != nil {
		c.ConnectionLimit = uint64(*dec.ConnectionLimit)
	}
	if dec.AlarmUrl != nil {
		c.AlarmUrl = *dec.AlarmUrl
	}
	if dec.GasPrice != nil {
		c.GasPrice = *dec.GasPrice
	}
	return nil
}
