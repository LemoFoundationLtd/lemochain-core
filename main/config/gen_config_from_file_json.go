// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package config

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-go/common/hexutil"
)

var _ = (*ConfigFromFileMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c ConfigFromFile) MarshalJSON() ([]byte, error) {
	type ConfigFromFile struct {
		ChainID         hexutil.Uint64 `json:"chainID"        gencodec:"required"`
		SleepTime       hexutil.Uint64 `json:"sleepTime"`
		Timeout         hexutil.Uint64 `json:"timeout"`
		DbUri           string         `json:"dbUri"          gencodec:"required"`
		DbDriver        string         `json:"dbDriver"       gencodec:"required"`
		TermDuration    hexutil.Uint64 `json:"termDuration"`
		InterimDuration hexutil.Uint64 `json:"interimDuration"`
	}
	var enc ConfigFromFile
	enc.ChainID = hexutil.Uint64(c.ChainID)
	enc.SleepTime = hexutil.Uint64(c.SleepTime)
	enc.Timeout = hexutil.Uint64(c.Timeout)
	enc.DbUri = c.DbUri
	enc.DbDriver = c.DbDriver
	enc.TermDuration = hexutil.Uint64(c.TermDuration)
	enc.InterimDuration = hexutil.Uint64(c.InterimDuration)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *ConfigFromFile) UnmarshalJSON(input []byte) error {
	type ConfigFromFile struct {
		ChainID         *hexutil.Uint64 `json:"chainID"        gencodec:"required"`
		SleepTime       *hexutil.Uint64 `json:"sleepTime"`
		Timeout         *hexutil.Uint64 `json:"timeout"`
		DbUri           *string         `json:"dbUri"          gencodec:"required"`
		DbDriver        *string         `json:"dbDriver"       gencodec:"required"`
		TermDuration    *hexutil.Uint64 `json:"termDuration"`
		InterimDuration *hexutil.Uint64 `json:"interimDuration"`
	}
	var dec ConfigFromFile
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainID' for ConfigFromFile")
	}
	c.ChainID = uint64(*dec.ChainID)
	if dec.SleepTime != nil {
		c.SleepTime = uint64(*dec.SleepTime)
	}
	if dec.Timeout != nil {
		c.Timeout = uint64(*dec.Timeout)
	}
	if dec.DbUri == nil {
		return errors.New("missing required field 'dbUri' for ConfigFromFile")
	}
	c.DbUri = *dec.DbUri
	if dec.DbDriver == nil {
		return errors.New("missing required field 'dbDriver' for ConfigFromFile")
	}
	c.DbDriver = *dec.DbDriver
	if dec.TermDuration != nil {
		c.TermDuration = uint64(*dec.TermDuration)
	}
	if dec.InterimDuration != nil {
		c.InterimDuration = uint64(*dec.InterimDuration)
	}
	return nil
}
