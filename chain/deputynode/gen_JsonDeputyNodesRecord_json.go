// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package deputynode

import (
	"encoding/json"

	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*JsonDeputyNodesRecordMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (j JsonDeputyNodesRecord) MarshalJSON() ([]byte, error) {
	type JsonDeputyNodesRecord struct {
		Height hexutil.Uint32 `json:"height"`
		Nodes  DeputyNodes    `json:"nodes"`
	}
	var enc JsonDeputyNodesRecord
	enc.Height = hexutil.Uint32(j.Height)
	enc.Nodes = j.Nodes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (j *JsonDeputyNodesRecord) UnmarshalJSON(input []byte) error {
	type JsonDeputyNodesRecord struct {
		Height *hexutil.Uint32 `json:"height"`
		Nodes  *DeputyNodes    `json:"nodes"`
	}
	var dec JsonDeputyNodesRecord
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Height != nil {
		j.Height = uint32(*dec.Height)
	}
	if dec.Nodes != nil {
		j.Nodes = *dec.Nodes
	}
	return nil
}
