// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package chain

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/chain/deputynode"
	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*genesisSpecMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (g Genesis) MarshalJSON() ([]byte, error) {
	type Genesis struct {
		Time        hexutil.Uint32           `json:"timestamp"     gencodec:"required"`
		ExtraData   hexutil.Bytes            `json:"extraData"`
		GasLimit    hexutil.Uint64           `json:"gasLimit"      gencodec:"required"`
		Founder     common.Address           `json:"founder"       gencodec:"required"`
		DeputyNodes []*deputynode.DeputyNode `json:"deputyNodes"   gencodec:"required"`
	}
	var enc Genesis
	enc.Time = hexutil.Uint32(g.Time)
	enc.ExtraData = g.ExtraData
	enc.GasLimit = hexutil.Uint64(g.GasLimit)
	enc.Founder = g.Founder
	enc.DeputyNodes = g.DeputyNodes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (g *Genesis) UnmarshalJSON(input []byte) error {
	type Genesis struct {
		Time        *hexutil.Uint32          `json:"timestamp"     gencodec:"required"`
		ExtraData   *hexutil.Bytes           `json:"extraData"`
		GasLimit    *hexutil.Uint64          `json:"gasLimit"      gencodec:"required"`
		Founder     *common.Address          `json:"founder"       gencodec:"required"`
		DeputyNodes []*deputynode.DeputyNode `json:"deputyNodes"   gencodec:"required"`
	}
	var dec Genesis
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Genesis")
	}
	g.Time = uint32(*dec.Time)
	if dec.ExtraData != nil {
		g.ExtraData = *dec.ExtraData
	}
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Genesis")
	}
	g.GasLimit = uint64(*dec.GasLimit)
	if dec.Founder == nil {
		return errors.New("missing required field 'founder' for Genesis")
	}
	g.Founder = *dec.Founder
	if dec.DeputyNodes == nil {
		return errors.New("missing required field 'deputyNodes' for Genesis")
	}
	g.DeputyNodes = dec.DeputyNodes
	return nil
}
