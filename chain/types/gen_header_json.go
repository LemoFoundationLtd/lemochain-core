// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-go/common"
	"github.com/LemoFoundationLtd/lemochain-go/common/hexutil"
	"github.com/LemoFoundationLtd/lemochain-go/common/math"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash  common.Hash         `json:"parentHash"       gencodec:"required"`
		LemoBase    common.Address      `json:"miner"            gencodec:"required"`
		VersionRoot common.Hash         `json:"versionRoot"      gencodec:"required"`
		TxRoot      common.Hash         `json:"transactionRoot"  gencodec:"required"`
		LogRoot     common.Hash         `json:"changeLogRoot"    gencodec:"required"`
		EventRoot   common.Hash         `json:"eventRoot"        gencodec:"required"`
		Bloom       Bloom               `json:"logsBloom"        gencodec:"required"`
		Height      math.Decimal32      `json:"height"           gencodec:"required"`
		GasLimit    math.HexOrDecimal64 `json:"gasLimit"         gencodec:"required"`
		GasUsed     math.HexOrDecimal64 `json:"gasUsed"          gencodec:"required"`
		Time        *hexutil.Big10      `json:"timestamp"        gencodec:"required"`
		SignData    hexutil.Bytes       `json:"signData"         gencodec:"required"`
		DeputyRoot  hexutil.Bytes       `json:"deputyRoot"       gencodec:"required"`
		Extra       hexutil.Bytes       `json:"extraData"        gencodec:"required"`
		Hash        common.Hash         `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.LemoBase = h.LemoBase
	enc.VersionRoot = h.VersionRoot
	enc.TxRoot = h.TxRoot
	enc.LogRoot = h.LogRoot
	enc.EventRoot = h.EventRoot
	enc.Bloom = h.Bloom
	enc.Height = math.Decimal32(h.Height)
	enc.GasLimit = math.HexOrDecimal64(h.GasLimit)
	enc.GasUsed = math.HexOrDecimal64(h.GasUsed)
	enc.Time = (*hexutil.Big10)(h.Time)
	enc.SignData = h.SignData
	enc.DeputyRoot = h.DeputyRoot
	enc.Extra = h.Extra
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash  *common.Hash         `json:"parentHash"       gencodec:"required"`
		LemoBase    *common.Address      `json:"miner"            gencodec:"required"`
		VersionRoot *common.Hash         `json:"versionRoot"      gencodec:"required"`
		TxRoot      *common.Hash         `json:"transactionRoot"  gencodec:"required"`
		LogRoot     *common.Hash         `json:"changeLogRoot"    gencodec:"required"`
		EventRoot   *common.Hash         `json:"eventRoot"        gencodec:"required"`
		Bloom       *Bloom               `json:"logsBloom"        gencodec:"required"`
		Height      *math.Decimal32      `json:"height"           gencodec:"required"`
		GasLimit    *math.HexOrDecimal64 `json:"gasLimit"         gencodec:"required"`
		GasUsed     *math.HexOrDecimal64 `json:"gasUsed"          gencodec:"required"`
		Time        *hexutil.Big10       `json:"timestamp"        gencodec:"required"`
		SignData    *hexutil.Bytes       `json:"signData"         gencodec:"required"`
		DeputyRoot  *hexutil.Bytes       `json:"deputyRoot"       gencodec:"required"`
		Extra       *hexutil.Bytes       `json:"extraData"        gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.LemoBase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.LemoBase = *dec.LemoBase
	if dec.VersionRoot == nil {
		return errors.New("missing required field 'versionRoot' for Header")
	}
	h.VersionRoot = *dec.VersionRoot
	if dec.TxRoot == nil {
		return errors.New("missing required field 'transactionRoot' for Header")
	}
	h.TxRoot = *dec.TxRoot
	if dec.LogRoot == nil {
		return errors.New("missing required field 'changeLogRoot' for Header")
	}
	h.LogRoot = *dec.LogRoot
	if dec.EventRoot == nil {
		return errors.New("missing required field 'eventRoot' for Header")
	}
	h.EventRoot = *dec.EventRoot
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Height == nil {
		return errors.New("missing required field 'height' for Header")
	}
	h.Height = uint32(*dec.Height)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.SignData == nil {
		return errors.New("missing required field 'signData' for Header")
	}
	h.SignData = *dec.SignData
	if dec.DeputyRoot == nil {
		return errors.New("missing required field 'deputyRoot' for Header")
	}
	h.DeputyRoot = *dec.DeputyRoot
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	return nil
}
