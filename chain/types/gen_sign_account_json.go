// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*signAccountMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SignAccount) MarshalJSON() ([]byte, error) {
	type SignAccount struct {
		Address common.Address `json:"address" gencodec:"required"`
		Weight  hexutil.Uint8  `json:"weight" gencodec:"required"`
	}
	var enc SignAccount
	enc.Address = s.Address
	enc.Weight = hexutil.Uint8(s.Weight)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SignAccount) UnmarshalJSON(input []byte) error {
	type SignAccount struct {
		Address *common.Address `json:"address" gencodec:"required"`
		Weight  *hexutil.Uint8  `json:"weight" gencodec:"required"`
	}
	var dec SignAccount
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address == nil {
		return errors.New("missing required field 'address' for SignAccount")
	}
	s.Address = *dec.Address
	if dec.Weight == nil {
		return errors.New("missing required field 'weight' for SignAccount")
	}
	s.Weight = uint8(*dec.Weight)
	return nil
}
