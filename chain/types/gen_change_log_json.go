// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-go/common"
)

// MarshalJSON marshals as JSON.
func (c ChangeLog) MarshalJSON() ([]byte, error) {
	type ChangeLog struct {
		LogType ChangeLogType  `json:"type"       gencodec:"required"`
		Address common.Address `json:"address"    gencodec:"required"`
		Version uint32         `json:"version"    gencodec:"required"`
		OldVal  interface{}
		NewVal  interface{} `json:"newValue"   gencodec:"required"`
		Extra   interface{} `json:"extra"`
	}
	var enc ChangeLog
	enc.LogType = c.LogType
	enc.Address = c.Address
	enc.Version = c.Version
	enc.OldVal = c.OldVal
	enc.NewVal = c.NewVal
	enc.Extra = c.Extra
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *ChangeLog) UnmarshalJSON(input []byte) error {
	type ChangeLog struct {
		LogType *ChangeLogType  `json:"type"       gencodec:"required"`
		Address *common.Address `json:"address"    gencodec:"required"`
		Version *uint32         `json:"version"    gencodec:"required"`
		OldVal  interface{}
		NewVal  interface{} `json:"newValue"   gencodec:"required"`
		Extra   interface{} `json:"extra"`
	}
	var dec ChangeLog
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.LogType == nil {
		return errors.New("missing required field 'type' for ChangeLog")
	}
	c.LogType = *dec.LogType
	if dec.Address == nil {
		return errors.New("missing required field 'address' for ChangeLog")
	}
	c.Address = *dec.Address
	if dec.Version == nil {
		return errors.New("missing required field 'version' for ChangeLog")
	}
	c.Version = *dec.Version
	if dec.OldVal != nil {
		c.OldVal = dec.OldVal
	}
	if dec.NewVal == nil {
		return errors.New("missing required field 'newValue' for ChangeLog")
	}
	c.NewVal = dec.NewVal
	if dec.Extra != nil {
		c.Extra = dec.Extra
	}
	return nil
}
