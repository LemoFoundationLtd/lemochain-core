// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/LemoFoundationLtd/lemochain-go/chain/deputynode"
)

// MarshalJSON marshals as JSON.
func (b Block) MarshalJSON() ([]byte, error) {
	type Block struct {
		Header      *Header                `json:"header"        gencodec:"required"`
		Txs         []*Transaction         `json:"transactions"  gencodec:"required"`
		ChangeLogs  []*ChangeLog           `json:"changeLogs"    gencodec:"required"`
		Confirms    []SignData             `json:"confirms"`
		DeputyNodes deputynode.DeputyNodes `json:"deputyNodes"`
	}
	var enc Block
	enc.Header = b.Header
	enc.Txs = b.Txs
	enc.ChangeLogs = b.ChangeLogs
	enc.Confirms = b.Confirms
	enc.DeputyNodes = b.DeputyNodes
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *Block) UnmarshalJSON(input []byte) error {
	type Block struct {
		Header      *Header                 `json:"header"        gencodec:"required"`
		Txs         []*Transaction          `json:"transactions"  gencodec:"required"`
		ChangeLogs  []*ChangeLog            `json:"changeLogs"    gencodec:"required"`
		Confirms    []SignData              `json:"confirms"`
		DeputyNodes *deputynode.DeputyNodes `json:"deputyNodes"`
	}
	var dec Block
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Header == nil {
		return errors.New("missing required field 'header' for Block")
	}
	b.Header = dec.Header
	if dec.Txs == nil {
		return errors.New("missing required field 'transactions' for Block")
	}
	b.Txs = dec.Txs
	if dec.ChangeLogs == nil {
		return errors.New("missing required field 'changeLogs' for Block")
	}
	b.ChangeLogs = dec.ChangeLogs
	if dec.Confirms != nil {
		b.Confirms = dec.Confirms
	}
	if dec.DeputyNodes != nil {
		b.DeputyNodes = *dec.DeputyNodes
	}
	return nil
}
