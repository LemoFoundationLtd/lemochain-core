// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*replenishAssetMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r ReplenishAsset) MarshalJSON() ([]byte, error) {
	type ReplenishAsset struct {
		AssetCode common.Hash    `json:"assetCode" gencodec:"required"`
		AssetId   common.Hash    `json:"assetId" gencodec:"required"`
		Amount    *hexutil.Big10 `json:"replenishAmount" gencodec:"required"`
	}
	var enc ReplenishAsset
	enc.AssetCode = r.AssetCode
	enc.AssetId = r.AssetId
	enc.Amount = (*hexutil.Big10)(r.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *ReplenishAsset) UnmarshalJSON(input []byte) error {
	type ReplenishAsset struct {
		AssetCode *common.Hash   `json:"assetCode" gencodec:"required"`
		AssetId   *common.Hash   `json:"assetId" gencodec:"required"`
		Amount    *hexutil.Big10 `json:"replenishAmount" gencodec:"required"`
	}
	var dec ReplenishAsset
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AssetCode == nil {
		return errors.New("missing required field 'assetCode' for ReplenishAsset")
	}
	r.AssetCode = *dec.AssetCode
	if dec.AssetId == nil {
		return errors.New("missing required field 'assetId' for ReplenishAsset")
	}
	r.AssetId = *dec.AssetId
	if dec.Amount == nil {
		return errors.New("missing required field 'replenishAmount' for ReplenishAsset")
	}
	r.Amount = (*big.Int)(dec.Amount)
	return nil
}
