// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-core/common"
	"github.com/LemoFoundationLtd/lemochain-core/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		Recipient     *common.Address `json:"to" rlp:"nil"`
		RecipientName string          `json:"toName"`
		GasPrice      *hexutil.Big10  `json:"gasPrice" gencodec:"required"`
		GasLimit      hexutil.Uint64  `json:"gasLimit" gencodec:"required"`
		Amount        *hexutil.Big10  `json:"amount" gencodec:"required"`
		Data          hexutil.Bytes   `json:"data"`
		Expiration    hexutil.Uint64  `json:"expirationTime" gencodec:"required"`
		Message       string          `json:"message"`
		Type          hexutil.Uint8   `json:"txType" gencodec:"required"`
		Version       hexutil.Uint8   `json:"version" gencodec:"required"`
		ChainID       hexutil.Uint16  `json:"chainId" gencodec:"required"`
		Sig           hexutil.Bytes   `json:"sig" gencodec:"required"`
		Hash          *common.Hash    `json:"hash" rlp:"-"`
		GasPayerSig   hexutil.Bytes   `json:"gasPayerSig"`
	}
	var enc txdata
	enc.Recipient = t.Recipient
	enc.RecipientName = t.RecipientName
	enc.GasPrice = (*hexutil.Big10)(t.GasPrice)
	enc.GasLimit = hexutil.Uint64(t.GasLimit)
	enc.Amount = (*hexutil.Big10)(t.Amount)
	enc.Data = t.Data
	enc.Expiration = hexutil.Uint64(t.Expiration)
	enc.Message = t.Message
	enc.Type = hexutil.Uint8(t.Type)
	enc.Version = hexutil.Uint8(t.Version)
	enc.ChainID = hexutil.Uint16(t.ChainID)
	enc.Sig = t.Sig
	enc.Hash = t.Hash
	enc.GasPayerSig = t.GasPayerSig
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		Recipient     *common.Address `json:"to" rlp:"nil"`
		RecipientName *string         `json:"toName"`
		GasPrice      *hexutil.Big10  `json:"gasPrice" gencodec:"required"`
		GasLimit      *hexutil.Uint64 `json:"gasLimit" gencodec:"required"`
		Amount        *hexutil.Big10  `json:"amount" gencodec:"required"`
		Data          *hexutil.Bytes  `json:"data"`
		Expiration    *hexutil.Uint64 `json:"expirationTime" gencodec:"required"`
		Message       *string         `json:"message"`
		Type          *hexutil.Uint8  `json:"txType" gencodec:"required"`
		Version       *hexutil.Uint8  `json:"version" gencodec:"required"`
		ChainID       *hexutil.Uint16 `json:"chainId" gencodec:"required"`
		Sig           *hexutil.Bytes  `json:"sig" gencodec:"required"`
		Hash          *common.Hash    `json:"hash" rlp:"-"`
		GasPayerSig   *hexutil.Bytes  `json:"gasPayerSig"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Recipient != nil {
		t.Recipient = dec.Recipient
	}
	if dec.RecipientName != nil {
		t.RecipientName = *dec.RecipientName
	}
	if dec.GasPrice == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.GasPrice = (*big.Int)(dec.GasPrice)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for txdata")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.Amount == nil {
		return errors.New("missing required field 'amount' for txdata")
	}
	t.Amount = (*big.Int)(dec.Amount)
	if dec.Data != nil {
		t.Data = *dec.Data
	}
	if dec.Expiration == nil {
		return errors.New("missing required field 'expirationTime' for txdata")
	}
	t.Expiration = uint64(*dec.Expiration)
	if dec.Message != nil {
		t.Message = *dec.Message
	}
	if dec.Type == nil {
		return errors.New("missing required field 'txType' for txdata")
	}
	t.Type = uint8(*dec.Type)
	if dec.Version == nil {
		return errors.New("missing required field 'version' for txdata")
	}
	t.Version = uint8(*dec.Version)
	if dec.ChainID == nil {
		return errors.New("missing required field 'chainId' for txdata")
	}
	t.ChainID = uint16(*dec.ChainID)
	if dec.Sig == nil {
		return errors.New("missing required field 'sig' for txdata")
	}
	t.Sig = *dec.Sig
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	if dec.GasPayerSig != nil {
		t.GasPayerSig = *dec.GasPayerSig
	}
	return nil
}
