// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/LemoFoundationLtd/lemochain-go/common"
	"github.com/LemoFoundationLtd/lemochain-go/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		Recipient     *common.Address `json:"to" rlp:"nil"`
		RecipientName hexutil.Bytes   `json:"toName"`
		Price         *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		Amount        *hexutil.Big    `json:"value" gencodec:"required"`
		GasLimit      hexutil.Uint64  `json:"gas" gencodec:"required"`
		Data          hexutil.Bytes   `json:"data" gencodec:"required"`
		Expiration    *hexutil.Big    `json:"expirationTime" gencodec:"required"`
		Message       hexutil.Bytes   `json:"message"`
		V             *hexutil.Big    `json:"v" gencodec:"required"`
		R             *hexutil.Big    `json:"r" gencodec:"required"`
		S             *hexutil.Big    `json:"s" gencodec:"required"`
		Hash          *common.Hash    `json:"hash" rlp:"-"`
	}
	var enc txdata
	enc.Recipient = t.Recipient
	enc.RecipientName = hexutil.Bytes(t.RecipientName)
	enc.Price = (*hexutil.Big)(t.Price)
	enc.Amount = (*hexutil.Big)(t.Amount)
	enc.GasLimit = hexutil.Uint64(t.GasLimit)
	enc.Data = t.Data
	enc.Expiration = (*hexutil.Big)(t.Expiration)
	enc.Message = t.Message
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		Recipient     *common.Address `json:"to" rlp:"nil"`
		RecipientName *hexutil.Bytes  `json:"toName"`
		Price         *hexutil.Big    `json:"gasPrice" gencodec:"required"`
		Amount        *hexutil.Big    `json:"value" gencodec:"required"`
		GasLimit      *hexutil.Uint64 `json:"gas" gencodec:"required"`
		Data          *hexutil.Bytes  `json:"data" gencodec:"required"`
		Expiration    *hexutil.Big    `json:"expirationTime" gencodec:"required"`
		Message       *hexutil.Bytes  `json:"message"`
		V             *hexutil.Big    `json:"v" gencodec:"required"`
		R             *hexutil.Big    `json:"r" gencodec:"required"`
		S             *hexutil.Big    `json:"s" gencodec:"required"`
		Hash          *common.Hash    `json:"hash" rlp:"-"`
	}
	var dec txdata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Recipient != nil {
		t.Recipient = dec.Recipient
	}
	if dec.RecipientName != nil {
		t.RecipientName = string(*dec.RecipientName)
	}
	if dec.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = (*big.Int)(dec.Price)
	if dec.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = (*big.Int)(dec.Amount)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.Data == nil {
		return errors.New("missing required field 'data' for txdata")
	}
	t.Data = *dec.Data
	if dec.Expiration == nil {
		return errors.New("missing required field 'expirationTime' for txdata")
	}
	t.Expiration = (*big.Int)(dec.Expiration)
	if dec.Message != nil {
		t.Message = *dec.Message
	}
	if dec.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = (*big.Int)(dec.V)
	if dec.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = (*big.Int)(dec.S)
	if dec.Hash != nil {
		t.Hash = dec.Hash
	}
	return nil
}
